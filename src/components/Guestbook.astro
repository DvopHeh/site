---
// src/components/Guestbook.astro
const { request } = Astro;

// Handle form submission
if (request.method === 'POST') {
  try {
    const formData = await request.formData();
    const name = formData.get('name') as string;
    const message = formData.get('message') as string;
    
    if (name && message) {
      // Insert into D1 database
      await Astro.locals.DB.prepare(
        'INSERT INTO guestbook_entries (name, message) VALUES (?, ?)'
      ).bind(name, message).run();
    }
  } catch (error) {
    console.error('Error adding entry:', error);
  }
}

// Fetch existing entries
type GuestbookEntry = {
  name: string;
  message: string;
  created_at: string;
};

let entries: GuestbookEntry[] = [];
try {
  const result = await Astro.locals.DB.prepare(
    'SELECT * FROM guestbook_entries ORDER BY created_at DESC LIMIT 50'
  ).all();
  entries = result.results as GuestbookEntry[] || [];
} catch (error) {
  console.error('Error fetching entries:', error);
}
---

<div class="guestbook">
  <form class="form" method="POST">
    <input type="text" name="name" placeholder="Name" required>
    <textarea name="message" placeholder="Message" required rows="2"></textarea>
    <button type="submit">Add Entry</button>
  </form>
  
  <div class="header">
    <span class="count">{entries.length} entries</span>
  </div>
  
  <div id="entries">
    {entries.length === 0 ? (
      <div class="no-entries">No entries yet!</div>
    ) : (
      entries.map(entry => (
        <div class="entry">
          <div>
            <span class="entry-name">{entry.name}</span>
            <span class="entry-date">{new Date(entry.created_at).toLocaleString()}</span>
          </div>
          <div class="entry-message">{entry.message}</div>
        </div>
      ))
    )}
  </div>
</div>