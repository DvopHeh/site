---
export const prerender = false;

type GuestbookEntry = {
  id: number;
  name: string;
  message: string;
  created_at: string;
};

let entries: GuestbookEntry[] = [];

type LocalsWithDB = typeof Astro.locals & { runtime?: { env?: { DB?: any } } };
const locals = Astro.locals as LocalsWithDB;

try {
  const db = locals?.runtime?.env?.DB;
  if (!db) {
    console.error('Database binding not available in component');
    entries = [];
  } else {
    const result = await db.prepare(
      'SELECT * FROM guestbook ORDER BY created_at DESC LIMIT 50'
    ).all();

    entries = result.results || [];
  }
} catch (e) {
  console.error('Error fetching entries:', e);
  entries = [];
}

const formatDate = (dateString) => {
  try {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  } catch {
    return 'Unknown date';
  }
};
---

<div class="guestbook">
  <div class="entries">
    {entries.length === 0 ? (
      <p class="no-entries">No entries yet. Be the first to sign!</p>
    ) : (
      entries.map((entry) => (
        <div class="entry">
          <div class="entry-header">
            <strong class="entry-name">{entry.name}</strong>
            <span class="entry-date">{formatDate(entry.created_at)}</span>
          </div>
          <div class="entry-message">{entry.message}</div>
        </div>
      ))
    )}
  </div>
</div>