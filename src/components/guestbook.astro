---
// guestbook.astro
export const prerender = false;

// Define the type for a guestbook entry
type GuestbookEntry = {
  id: number;
  name: string;
  message: string;
  created_at: string;
};

let entries: GuestbookEntry[] = [];

// Ensure Astro.locals has runtime.env.DB typed correctly
type LocalsWithDB = typeof Astro.locals & { runtime?: { env?: { DB?: any } } };
const locals = Astro.locals as LocalsWithDB;

// Fetch entries from D1 database
try {
  const db = locals?.runtime?.env?.DB;
  if (!db) {
    console.error('Database binding not available in component');
    entries = [];
  } else {
    const result = await db.prepare(
      'SELECT * FROM guestbook ORDER BY created_at DESC LIMIT 50'
    ).all();

    entries = result.results || [];
  }
} catch (e) {
  console.error('Error fetching entries:', e);
  entries = [];
}

const formatDate = (dateString) => {
  try {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  } catch {
    return 'Unknown date';
  }
};
---

<div class="guestbook">
  <div id="error-message" class="error" style="display: none;"></div>
  <div id="success-message" class="success" style="display: none;">Entry added successfully!</div>
  
  <form id="guestbook-form" class="guestbook-form">
    <div class="form-group">
      <input 
        type="text" 
        name="name" 
        placeholder="Your name" 
        maxlength="20"
        required 
      />
    </div>
    
    <div class="form-group">
      <textarea 
        name="message" 
        placeholder="Your message" 
        maxlength="500"
        rows="3"
        required
      ></textarea>
    </div>
    
    <button type="submit" class="submit-btn">Sign Guestbook</button>
  </form>

  <div class="entries">
    {entries.length === 0 ? (
      <p class="no-entries">No entries yet. Be the first to sign!</p>
    ) : (
      entries.map((entry) => (
        <div class="entry">
          <div class="entry-header">
            <strong class="entry-name">{entry.name}</strong>
            <span class="entry-date">{formatDate(entry.created_at)}</span>
          </div>
          <div class="entry-message">{entry.message}</div>
        </div>
      ))
    )}
  </div>
</div>

<script>
document.getElementById('guestbook-form')?.addEventListener('submit', async (e) => {
  e.preventDefault();
  
  const form = e.target as HTMLFormElement;
  const formData = new FormData(form);
  const errorDiv = document.getElementById('error-message');
  const successDiv = document.getElementById('success-message');
  
  // Hide previous messages
  if (errorDiv) errorDiv.style.display = 'none';
  if (successDiv) successDiv.style.display = 'none';
  
  try {
    const response = await fetch('/api/guestbook', {
      method: 'POST',
      body: formData
    });
    
    const data = await response.json();
    
    if (response.ok) {
      // Success
      if (successDiv) {
        successDiv.style.display = 'block';
        setTimeout(() => {
          successDiv.style.display = 'none';
        }, 3000);
      }
      form.reset();
      // Reload page to show new entry
      setTimeout(() => {
        window.location.reload();
      }, 1000);
    } else {
      // Error
      if (errorDiv) {
        errorDiv.textContent = data.error || 'An error occurred';
        errorDiv.style.display = 'block';
      }
    }
  } catch (error) {
    console.error('Error submitting form:', error);
    if (errorDiv) {
      errorDiv.textContent = 'Network error. Please try again.';
      errorDiv.style.display = 'block';
    }
  }
});
</script>